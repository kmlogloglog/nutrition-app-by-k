generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  metrics       Metrics[]
  nutritionPlan NutritionPlan[]
  subscription  Subscription?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Metrics {
  id          String   @id @default(cuid())
  userId      String
  weight      Float
  height      Float?
  bodyFat     Float?
  date        DateTime @default(now())
  notes       String?
  waist       Float?
  chest       Float?
  arms        Float?
  thighs      Float?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NutritionPlan {
  id              String   @id @default(cuid())
  userId          String
  planDetails     Json
  questionnaire   Json
  status          Status   @default(PENDING)
  nutritionistId  String?
  feedback        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  stripeId  String   @unique
  status    String
  planType  PlanType
  startDate DateTime @default(now())
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  NUTRITIONIST
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum PlanType {
  MONTHLY
  YEARLY
}